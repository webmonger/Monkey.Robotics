#region License
// Copyright (c) 2014, David Taylor
//
// Permission to use, copy, modify, and/or distribute this software for any 
// purpose with or without fee is hereby granted, provided that the above 
// copyright notice and this permission notice appear in all copies, unless 
// such copies are solely in the form of machine-executable object code 
// generated by a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES 
// WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF 
// MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR 
// ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
// WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN 
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF 
// OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#endregion License
using System;
#if MF_FRAMEWORK_VERSION_V4_3
using System.Collections.Generic;
#else
using System.Collections.Generic;
#endif

namespace Robotics.Serialization
{
#if MF_FRAMEWORK_VERSION_V4_3
	internal sealed class StateManager
	{
		private List<Object> _state = new List<Object>();

		public StateManager(
			object initialState)
		{
			this._state.Add(initialState);
		}

		public object Peek()
		{
			if (this._state.Count == 0)
			{
				return null;
			}

			return this._state[this._state.Count - 1];
		}

		public int Count
		{
			get
			{
				return this._state.Count;
			}
		}

		public void Push(
			object state)
		{
			if (null == state)
			{
				throw new ArgumentNullException("state");
			}

			this._state.Add(state);
		}

		public void Pop()
		{
			if (this._state.Count <= 1)
			{
				throw new InvalidOperationException();
			}

			this._state.RemoveAt(this._state.Count - 1);
		}

		public void Set(
			Object state)
		{
			if (null == state)
			{
				throw new ArgumentNullException("state");
			}

			if (this._state.Count <= 1)
			{
				throw new InvalidOperationException();
			}

			this._state[this._state.Count - 1] = state;
		}
	}
#else
	internal sealed class StateManager<TState>
		where TState : class
	{
		private List<TState> _state = new List<TState>();

		public StateManager(
			TState initialState)
		{
			this._state.Add(initialState);
		}

		public TState Peek()
		{
			if (this._state.Count == 0)
			{
				return default(TState);
			}

			return this._state[this._state.Count - 1];
		}

		public int Count
		{
			get
			{
				return this._state.Count;
			}
		}

		public void Push(
			TState state)
		{
			if (null == state)
			{
				throw new ArgumentNullException("state");
			}

			this._state.Add(state);
		}

		public void Pop()
		{
			if (this._state.Count <= 1)
			{
				throw new InvalidOperationException();
			}

			this._state.RemoveAt(this._state.Count - 1);
		}

		public void Set(
			TState state)
		{
			if (null == state)
			{
				throw new ArgumentNullException("state");
			}

			if (this._state.Count <= 1)
			{
				throw new InvalidOperationException();
			}

			this._state[this._state.Count - 1] = state;
		}
	}
#endif
}
